# Load necessary library
library(dplyr)
library(data.table)
# Set working directory to your project root folder
setwd("C:/Users/User/Desktop/USM/Y3/CPC351/CPC351 Assignment 1")
# Use relative paths for all file operations
folder_path <- "Data/AmazonProducts"
dir.create("Question3/Temp", showWarnings = FALSE)
# Get list of CSV files using relative path
file_list <- list.files(path = folder_path, pattern = "*.csv", full.names = TRUE)
print(file_list)
# Read all CSV files and combine them into a single data frame
# lapply() applies the read.csv() function to each file in the file_list
# do.call(rbind, ...) combines the resulting data frames into a single data frame
combined_data <- do.call(rbind, lapply(file_list, fread))
# Check for the number of null values in each column before preprocessing
null_count <- sapply(combined_data, function(x) sum(is.na(x) | x == "" | x == "NA"))
print(null_count)
# Preprocessing steps
# 1. Convert empty strings to NA in specified columns
combined_data_cleaned <- combined_data %>%
mutate(
ratings = na_if(ratings, ""),
no_of_ratings = na_if(no_of_ratings, ""),
actual_price = na_if(actual_price, ""),
discount_price = na_if(discount_price, "")
)
# 2. Assign actual_price to discount_price where discount_price is null
combined_data_cleaned$discount_price[is.na(combined_data_cleaned$discount_price)] <-
combined_data_cleaned$actual_price[is.na(combined_data_cleaned$discount_price)]
# 3. Remove rows where actual_price is 0 or NA
combined_data_cleaned <- combined_data_cleaned %>%
filter(!is.na(actual_price))
# 4. Set ratings and no_of_ratings to 0 where they are null
combined_data_cleaned <- combined_data_cleaned %>%
mutate(
ratings = ifelse(is.na(ratings), 0, ratings),
no_of_ratings = ifelse(is.na(no_of_ratings), 0, no_of_ratings)
)
# Save the preprocessed data using relative path
write.csv(combined_data_cleaned, "Question3/Temp/1)Amazon_Products_All.csv", row.names = FALSE)
# Check for the number of null values in each column after preprocessing
null_count <- sapply(combined_data_cleaned, function(x) sum(is.na(x) | x == "" | x == "NA"))
print(null_count)
# Count the total number of rows (samples) before preprocessing
total_samples_before <- nrow(combined_data)
# Count the total number of rows (samples) after preprocessing
total_samples_after <- nrow(combined_data_cleaned)
# Print the total number of rows (samples) before and after preprocessing
print(paste("Total samples before preprocessing:", total_samples_before))
print(paste("Total samples after preprocessing:", total_samples_after))
library(dplyr)
library(data.table)
# Read CSV file using relative path
combined_data2 <- fread("Question3/Temp/1)Amazon_Products_All.csv", stringsAsFactors = FALSE)
# Function to extract manufacturer name based on conditions
extract_manufacturer <- function(name) {
# Split the name into words
# unlist() converts the split result into a vector of words
words <- unlist(strsplit(name, " "))
# 2 conditions to extract manufacturer name
# Case 1: If the first word is followed by a number, take only the first word
if (length(words) > 1 && grepl("^[A-Za-z]+\\s?[0-9]", paste(words[1], words[2], sep = " "))) {
return(words[1])
}
# Case 2: If the first word has one or two characters, take the first two words
if (nchar(words[1]) <= 2) {
if (length(words) > 1) {
return(paste(words[1], words[2], sep = " "))
} else {
return(words[1]) # If there is only one word, return it
}
}
# Default: return only the first word as the manufacturer
return(words[1])
}
# Extract manufacturer and update the 'manufacturer' column
combined_data2$manufacturer <- sapply(combined_data2$name, extract_manufacturer)
# Move the "manufacturer" column to immediately after the "name" column
combined_data2 <- combined_data2 %>% relocate(manufacturer, .after = name)
# Save the combined data using relative path
write.csv(combined_data2, "Question3/Temp/2)Manufacturer_Extracted.csv", row.names = FALSE)
# Check for the number of null values in each column
null_count <- sapply(combined_data2, function(x) sum(is.na(x) | x == "" | x == "NA"))
print(null_count)
library(dplyr)
library(data.table)
# Read CSV file using relative path
combined_data3 <- fread("Question3/Temp/2)Manufacturer_Extracted.csv")
# Convert 'actual_price' and 'discount_price' to numeric (float)
# gsub(pattern, replacement, x) replaces all occurrences of pattern in x with replacement
# ^ inside square brackets negates the expression
# "[^0-9.]" matches any character that is not a digit or a period
# It removes all non-numeric characters except the decimal point
combined_data3$actual_price <- as.numeric(gsub("[^0-9.]", "", combined_data3$actual_price))
combined_data3$discount_price <- as.numeric(gsub("[^0-9.]", "", combined_data3$discount_price))
# Convert 'no_of_ratings' to integer - remove commas first, then other non-numeric characters
combined_data3$no_of_ratings <- as.integer(gsub("[^0-9.]", "", combined_data3$no_of_ratings))
# convert 'ratings' to numeric
combined_data3$ratings <- as.numeric(combined_data3$ratings)
# Set ratings and no_of_ratings to 0 where they are null
combined_data3 <- combined_data3 %>%
mutate(
ratings = ifelse(is.na(ratings), 0, ratings),
no_of_ratings = ifelse(is.na(no_of_ratings), 0, no_of_ratings)
)
# Remove rows where actual_price is 0
# filter() is used to filter rows based on a condition
# %>%, is a pipe operator that is used to pass the result of one function as the input to the next function
combined_data3 <- combined_data3 %>%
filter(actual_price != 0)
# Save the combined data using relative path
write.csv(combined_data3, "Question3/Temp/3)Cleaned_Data_Types.csv", row.names = FALSE)
# Check for the number of null (NA or empty) values in each column
null_count <- sapply(combined_data3, function(x) sum(is.na(x) | x == "" | x == "NA"))
print(null_count)
# Count the total number of rows (samples)
total_samples_3c <- nrow(combined_data3)
print(paste("Total samples:", total_samples_3c))
library(dplyr)
library(data.table)
combined_data4 <- fread("Question3/Temp/3)Cleaned_Data_Types.csv")
# Few steps of cleaning are needed to be done
# 1. Check if there are products with actual_price less than or equal to discount_price
if (any(combined_data4$actual_price < combined_data4$discount_price, na.rm = TRUE)) {
warning("There are products with actual_price less than or equal to discount_price")
}
# 2. Remove row with NA in actual_price
combined_data4 <- combined_data4[!is.na(combined_data4$actual_price), ]
# 3. Replace NA in discount_price with actual_price
combined_data4$discount_price[is.na(combined_data4$discount_price)] <- combined_data4$actual_price[is.na(combined_data4$discount_price)]
# Check for the number of null (NA or empty) values in each column
null_count <- sapply(combined_data4, function(x) sum(is.na(x) | x == "" | x == "NA"))
print(null_count)
# Calculate discount percentage
combined_data4 <- combined_data4 %>%
mutate(discount_percentage = round(((actual_price - discount_price) / actual_price) * 100, 2))
# Save the combined data into a new CSV file
write.csv(combined_data4, "Question3/Temp/4)Discount_Percentage.csv", row.names = FALSE)
library(dplyr)
library(data.table)
# Read CSV file using relative path
combined_data5 <- fread("Question3/Temp/4)Discount_Percentage.csv")
# Group by manufacturer and calculate average discount percentage
# combined_data %>% pass the combined_data data frame to the group_by() function
# group_by(manufacturer) groups the data by the "manufacturer" column
manufacturer_discount <- combined_data5 %>%
mutate(manufacturer = tolower(manufacturer)) %>%  # Convert all manufacturer names to lowercase
group_by(manufacturer) %>%
summarize(avg_discount_percentage = round(mean(discount_percentage, na.rm = TRUE), 2)) %>%
arrange(desc(avg_discount_percentage))
# View the manufacturer with the highest average discount
top_discount_manufacturer <- manufacturer_discount[1, ]
top_discount_manufacturer
# Save the combined data using relative path
write.csv(manufacturer_discount, "Question3/Temp/5)Manufacturer_Summarised.csv", row.names = FALSE)
# Check for the number of null (NA or empty) values in each column
null_count <- sapply(combined_data5, function(x) sum(is.na(x) | x == "" | x == "NA"))
print(null_count)
structure(combined_data5)
# View the top 10 manufacturers with highest average discount
top_discount_manufacturers <- head(manufacturer_discount, 10)
print(top_discount_manufacturers)
library(dplyr)
library(data.table)
# Read CSV file using relative path
combined_data5 <- fread("Question3/Temp/4)Discount_Percentage.csv")
# Group by manufacturer and calculate average discount percentage
# combined_data %>% pass the combined_data data frame to the group_by() function
# group_by(manufacturer) groups the data by the "manufacturer" column
manufacturer_discount <- combined_data5 %>%
mutate(manufacturer = tolower(manufacturer)) %>%  # Convert all manufacturer names to lowercase
group_by(manufacturer) %>%
summarize(avg_discount_percentage = round(mean(discount_percentage, na.rm = TRUE), 2)) %>%
arrange(desc(avg_discount_percentage))
# View the top 10 manufacturers with highest average discount
top_discount_manufacturers <- head(manufacturer_discount, 10)
print(top_discount_manufacturers)
# Save the combined data using relative path
write.csv(manufacturer_discount, "Question3/Temp/5)Manufacturer_Summarised.csv", row.names = FALSE)
# Check for the number of null (NA or empty) values in each column
null_count <- sapply(combined_data5, function(x) sum(is.na(x) | x == "" | x == "NA"))
print(null_count)
library(dplyr)
library(data.table)
# Read CSV file using relative path
combined_data5 <- fread("Question3/Temp/4)Discount_Percentage.csv")
# Group by manufacturer and calculate average discount percentage
# combined_data %>% pass the combined_data data frame to the group_by() function
# group_by(manufacturer) groups the data by the "manufacturer" column
manufacturer_discount <- combined_data5 %>%
mutate(manufacturer = tolower(manufacturer)) %>%  # Convert all manufacturer names to lowercase
group_by(manufacturer) %>%
summarize(avg_discount_percentage = round(mean(discount_percentage, na.rm = TRUE), 2)) %>%
arrange(desc(avg_discount_percentage))
# View the top 10 manufacturers with highest average discount
top_discount_manufacturers <- head(manufacturer_discount, 10)
print(top_discount_manufacturers)
# Print the total number of rows in combined_data5
cat("Total number of rows in combined_data5:", nrow(combined_data5), "\n")
# Check for the number of null (NA or empty) values in each column
null_count <- sapply(combined_data5, function(x) sum(is.na(x) | x == "" | x == "NA"))
print(null_count)
# Save the combined data using relative path
write.csv(manufacturer_discount, "Question3/Temp/5)Manufacturer_Summarised.csv", row.names = FALSE)
library(dplyr)
library(data.table)
# Read CSV file using relative path
combined_data5 <- fread("Question3/Temp/4)Discount_Percentage.csv")
# Group by manufacturer and calculate average discount percentage
# combined_data %>% pass the combined_data data frame to the group_by() function
# group_by(manufacturer) groups the data by the "manufacturer" column
manufacturer_discount <- combined_data5 %>%
mutate(manufacturer = tolower(manufacturer)) %>%  # Convert all manufacturer names to lowercase
group_by(manufacturer) %>%
summarize(avg_discount_percentage = round(mean(discount_percentage, na.rm = TRUE), 2)) %>%
arrange(desc(avg_discount_percentage))
# View the top 10 manufacturers with highest average discount
top_discount_manufacturers <- head(manufacturer_discount, 10)
print(top_discount_manufacturers)
# Print the total number of rows in combined_data5
cat("Total number of rows before summarising:", nrow(combined_data5), "\n")
cat("Total number of rows after summarising:", nrow(manufacturer_discount), "\n")
# Check for the number of null (NA or empty) values in each column
null_count <- sapply(combined_data5, function(x) sum(is.na(x) | x == "" | x == "NA"))
print(null_count)
# Save the combined data using relative path
write.csv(manufacturer_discount, "Question3/Temp/5)Manufacturer_Summarised.csv", row.names = FALSE)
library(dplyr)
library(data.table)
# Read CSV file using relative path
combined_data5 <- fread("Question3/Temp/4)Discount_Percentage.csv")
# Group by manufacturer and calculate average discount percentage
# combined_data %>% pass the combined_data data frame to the group_by() function
# group_by(manufacturer) groups the data by the "manufacturer" column
manufacturer_discount <- combined_data5 %>%
mutate(manufacturer = tolower(manufacturer)) %>%  # Convert all manufacturer names to lowercase
group_by(manufacturer) %>%
summarize(avg_discount_percentage = round(mean(discount_percentage, na.rm = TRUE), 2)) %>%
arrange(desc(avg_discount_percentage))
# View the top 10 manufacturers with highest average discount
top_discount_manufacturers <- head(manufacturer_discount, 10)
print(top_discount_manufacturers)
# Print the total number of rows before and after summarising
cat("Total number of rows before summarising:", nrow(combined_data5), "\n")
cat("Total number of rows after summarising:", nrow(manufacturer_discount), "\n")
# Check for the number of null (NA or empty) values in each column
null_count <- sapply(combined_data5, function(x) sum(is.na(x) | x == "" | x == "NA"))
print(null_count)
# Save the combined data using relative path
write.csv(manufacturer_discount, "Question3/Temp/5)Manufacturer_Summarised.csv", row.names = FALSE)
library(dplyr)
library(data.table)
# Read CSV file using relative path
combined_data6 <- fread("Question3/Temp/4)Discount_Percentage.csv", stringsAsFactors = FALSE)
# Filter ratings between 0.0 and 5.0
combined_data6 <- combined_data6 %>%
filter(ratings >= 0 & ratings <= 5)
# Categorize ratings and overwrite the ratings column
combined_data6 <- combined_data6 %>%
mutate(ratings = case_when(
ratings > 3.0 ~ "High",
ratings >= 1.5 & ratings <= 3.0 ~ "Medium",
ratings < 1.5 ~ "Low",
TRUE ~ "Unknown"  # In case there are missing ratings
))
# Save the combined data using relative path
write.csv(combined_data6, "Question3/Temp/6)Ratings_Categorised.csv", row.names = FALSE)
# Count the number of products in each rating category
rating_counts <- combined_data6 %>%
group_by(ratings) %>%
summarise(count = n())
# Print the results
print("Number of products in each rating category:")
print(rating_counts)
# Check for the number of null (NA or empty) values in each column
null_count <- sapply(combined_data6, function(x) sum(is.na(x) | x == "" | x == "NA"))
print(null_count)
library(dplyr)
library(data.table)
combined_data7 <- fread("Question3/Temp/4)Discount_Percentage.csv", stringsAsFactors = FALSE)
# Product with the highest price
highest_price_product <- combined_data7[which.max(combined_data7$discount_price), ]
# Product with the lowest price (excluding 0 prices and 0 discount percentages)
lowest_price_product <- combined_data7[which.min(combined_data7$discount_price[
combined_data7$discount_price > 0
]), ]
# Calculate correlation between discount percentage and number of ratings
# cor() computes the Pearson correlation coefficient, which measures the linear relationship between the two variables.
# use = "complete.obs" specifies that rows with missing values should be excluded from the calculation.
correlation <- cor(combined_data7$discount_percentage, combined_data7$no_of_ratings, use = "complete.obs")
# Try Spearman correlation to spot non-linear relationships
spearman_cor <- cor(combined_data7$discount_percentage, combined_data7$no_of_ratings, use = "complete.obs", method = "spearman")
# Print only name, manufacturer and discount_price for lowest & highest price products
lowest_price_product_selected <- lowest_price_product %>%
select(name, manufacturer, discount_price)
highest_price_product_selected <- highest_price_product %>%
select(name, manufacturer, discount_price)
# Display results
highest_price_product_selected
lowest_price_product_selected
print(correlation)
print(spearman_cor)
cat("Correlation between discount percentage and number of ratings (Pearson):", correlation, "\n")
cat("Correlation between discount percentage and number of ratings (Spearman):", spearman_cor, "\n")
library(dplyr)
library(data.table)
combined_data7 <- fread("Question3/Temp/4)Discount_Percentage.csv", stringsAsFactors = FALSE)
# Product with the highest price
highest_price_product <- combined_data7[which.max(combined_data7$discount_price), ]
# Product with the lowest price (excluding 0 prices and 0 discount percentages)
lowest_price_product <- combined_data7[which.min(combined_data7$discount_price[
combined_data7$discount_price > 0
]), ]
# Calculate correlation between discount percentage and number of ratings
# cor() computes the Pearson correlation coefficient, which measures the linear relationship between the two variables.
# use = "complete.obs" specifies that rows with missing values should be excluded from the calculation.
correlation <- cor(combined_data7$discount_percentage, combined_data7$no_of_ratings, use = "complete.obs")
# Try Spearman correlation to spot non-linear relationships
spearman_cor <- cor(combined_data7$discount_percentage, combined_data7$no_of_ratings, use = "complete.obs", method = "spearman")
# Print only name, manufacturer and discount_price for lowest & highest price products
lowest_price_product_selected <- lowest_price_product %>%
select(name, manufacturer, discount_price)
highest_price_product_selected <- highest_price_product %>%
select(name, manufacturer, discount_price)
# Display results
highest_price_product_selected
lowest_price_product_selected
cat("Correlation between discount percentage and number of ratings (Pearson):", correlation, "\n")
cat("Correlation between discount percentage and number of ratings (Spearman):", spearman_cor, "\n")
library(dplyr)
library(data.table)
# Set working directory
setwd("C:/Users/User/Desktop/USM/Y3/CPC351/CPC351 Assignment 1/Question3")
# Read CSV file using relative path
combined_data8 <- fread("Temp/4)Discount_Percentage.csv", stringsAsFactors = FALSE)
# Sort by number of ratings to find highest sales
combined_data8 <- combined_data8 %>%
arrange(desc(no_of_ratings))
# Get top 5 products with highest sales and select specific columns
highest_sales_products <- combined_data8[1:5, ] %>%
select(name, no_of_ratings)
# Save the combined data using relative path
write.csv(combined_data8, "Temp/8)Arranged_by_Sales.csv", row.names = FALSE)
# Print top 5 products (name and ratings only)
print(highest_sales_products)
library(dplyr)
library(data.table)
# Read CSV file using relative path
combined_data3 <- fread("Question3/Temp/2)Manufacturer_Extracted.csv")
library(dplyr)
library(data.table)
# Read CSV file using relative path
combined_data3 <- fread("Question3/Temp/2)Manufacturer_Extracted.csv")
library(dplyr)
library(data.table)
# Read CSV file using relative path
combined_data3 <- fread("Question3/Temp/2)Manufacturer_Extracted.csv")
# Set working directory to your project root folder
setwd("C:/Users/User/Desktop/USM/Y3/CPC351/CPC351 Assignment 1")
library(dplyr)
library(data.table)
# Read CSV file using relative path
combined_data3 <- fread("Question3/Temp/2)Manufacturer_Extracted.csv")
# Convert 'actual_price' and 'discount_price' to numeric (float)
# gsub(pattern, replacement, x) replaces all occurrences of pattern in x with replacement
# ^ inside square brackets negates the expression
# "[^0-9.]" matches any character that is not a digit or a period
# It removes all non-numeric characters except the decimal point
combined_data3$actual_price <- as.numeric(gsub("[^0-9.]", "", combined_data3$actual_price))
combined_data3$discount_price <- as.numeric(gsub("[^0-9.]", "", combined_data3$discount_price))
# Convert 'no_of_ratings' to integer - remove commas first, then other non-numeric characters
combined_data3$no_of_ratings <- as.integer(gsub("[^0-9.]", "", combined_data3$no_of_ratings))
# convert 'ratings' to numeric
combined_data3$ratings <- as.numeric(combined_data3$ratings)
# Set ratings and no_of_ratings to 0 where they are null
combined_data3 <- combined_data3 %>%
mutate(
ratings = ifelse(is.na(ratings), 0, ratings),
no_of_ratings = ifelse(is.na(no_of_ratings), 0, no_of_ratings)
)
# Remove rows where actual_price is 0
# filter() is used to filter rows based on a condition
# %>%, is a pipe operator that is used to pass the result of one function as the input to the next function
combined_data3 <- combined_data3 %>%
filter(actual_price != 0)
# Save the combined data using relative path
write.csv(combined_data3, "Question3/Temp/3)Cleaned_Data_Types.csv", row.names = FALSE)
# Check for the number of null (NA or empty) values in each column
null_count <- sapply(combined_data3, function(x) sum(is.na(x) | x == "" | x == "NA"))
print(null_count)
# Print datatypes of the numeric columns
numeric_columns <- c("actual_price", "discount_price", "no_of_ratings", "ratings")
column_types <- sapply(combined_data3[, numeric_columns], class)
# Print datatypes of the numeric columns
numeric_columns <- c("actual_price", "discount_price", "no_of_ratings", "ratings")
column_types <- sapply(combined_data3[numeric_columns], class)
# Print datatypes of the numeric columns
numeric_columns <- c("actual_price", "discount_price", "no_of_ratings", "ratings")
print("Data types of numeric columns:")
for (col in numeric_columns) {
print(paste(col, ":", class(combined_data3[[col]])))
}
# Print datatypes of the numeric columns
numeric_columns <- c("actual_price", "discount_price", "no_of_ratings", "ratings")
print("Data types of the edited columns:")
for (col in numeric_columns) {
print(paste(col, ":", class(combined_data3[[col]])))
}
library(dplyr)
library(data.table)
# Read CSV file using relative path
combined_data3 <- fread("Question3/Temp/2)Manufacturer_Extracted.csv")
# Convert 'actual_price' and 'discount_price' to numeric (float)
# gsub(pattern, replacement, x) replaces all occurrences of pattern in x with replacement
# ^ inside square brackets negates the expression
# "[^0-9.]" matches any character that is not a digit or a period
# It removes all non-numeric characters except the decimal point
combined_data3$actual_price <- as.numeric(gsub("[^0-9.]", "", combined_data3$actual_price))
combined_data3$discount_price <- as.numeric(gsub("[^0-9.]", "", combined_data3$discount_price))
# Convert 'no_of_ratings' to integer - remove commas first, then other non-numeric characters
combined_data3$no_of_ratings <- as.integer(gsub("[^0-9.]", "", combined_data3$no_of_ratings))
# convert 'ratings' to numeric
combined_data3$ratings <- as.numeric(combined_data3$ratings)
# Set ratings and no_of_ratings to 0 where they are null
combined_data3 <- combined_data3 %>%
mutate(
ratings = ifelse(is.na(ratings), 0, ratings),
no_of_ratings = ifelse(is.na(no_of_ratings), 0, no_of_ratings)
)
# Remove rows where actual_price is 0
# filter() is used to filter rows based on a condition
# %>%, is a pipe operator that is used to pass the result of one function as the input to the next function
combined_data3 <- combined_data3 %>%
filter(actual_price != 0)
# Save the combined data using relative path
write.csv(combined_data3, "Question3/Temp/3)Cleaned_Data_Types.csv", row.names = FALSE)
# Check for the number of null (NA or empty) values in each column
null_count <- sapply(combined_data3, function(x) sum(is.na(x) | x == "" | x == "NA"))
print(null_count)
# Print datatypes of the numeric columns
numeric_columns <- c("actual_price", "discount_price", "no_of_ratings", "ratings")
print("Data types of the edited columns:")
for (col in numeric_columns) {
print(paste(col, ":", class(combined_data3[[col]])))
}
# Count the total number of rows (samples)
total_samples_3c <- nrow(combined_data3)
print(paste("Total samples:", total_samples_3c))
